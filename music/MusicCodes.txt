Music Driver Code

package music;


import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class MusicDriver {
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Music Analytics");

        job.setJarByClass(MusicDriver.class);
        job.setMapperClass(MusicMapper.class);
        job.setReducerClass(MusicReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);
        
        FileInputFormat.addInputPath(job, new Path(args[0])); // Input CSV path
        FileOutputFormat.setOutputPath(job, new Path(args[1])); // Output directory

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

Music Mapper Code

package music;

import java.io.IOException;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Mapper;

public class MusicMapper extends Mapper<LongWritable, Text, Text, Text> {
    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        if (key.get() == 0 && value.toString().contains("UserId")) return; // skip header
        String[] fields = value.toString().split(",");
        if (fields.length < 3) return;

        String userId = fields[0].trim();
        String trackId = fields[1].trim();
        String shared = fields[2].trim();

        context.write(new Text(trackId), new Text("USER:" + userId));

        if (shared.equals("1")) {
            context.write(new Text(trackId), new Text("SHARED"));
        }
    }
}

Music Reducer Code

package music;

import java.io.IOException;
import java.util.HashSet;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Reducer;

public class MusicReducer extends Reducer<Text, Text, Text, Text> {
    public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
        HashSet<String> uniqueUsers = new HashSet<>();
        int shareCount = 0;
        for (Text val : values) {
            String v = val.toString();
            if (v.startsWith("USER:")) {
                uniqueUsers.add(v.substring(5));
            } else if (v.equals("SHARED")) {
                shareCount++;
            }
        }

        context.write(key, new Text("UniqueListeners: " + uniqueUsers.size() + ", SharedCount: " + shareCount));
    }
}
